     ;; *Exercise 1.9:* Each of the following two procedures defines a
     ;; method for adding two positive integers in terms of the procedures
     ;; `inc', which increments its argument by 1, and `dec', which
     ;; decrements its argument by 1.

     ;;      (define (+ a b)
     ;;        (if (= a 0)
     ;;            b
     ;;            (inc (+ (dec a) b))))

     ;;      (define (+ a b)
     ;;        (if (= a 0)
     ;;            b
     ;;            (+ (dec a) (inc b))))

     ;; Using the substitution model, illustrate the process generated by
     ;; each procedure in evaluating `(+ 4 5)'.  Are these processes
     ;; iterative or recursive?

(defun plus (a b)
  (if (zerop a)
      b
      (1+ (plus (1- a) b))))

(defun plus2 (a b)
  (if (zerop a)
      b
      (plus2 (1- a) (1+ b))))

(trace plus)
(plus 10 20)

(trace plus2)
(plus2 10 20)

;; it's hard to see in common lisp the tail recusion. But,
;; plus2 returns 30 from each of 10 calls,
;; plus returns 21. 22. 23, ..., 30, so the tail position
;; is doing the addition on plus, but only unwinding the stack in plus2
;; this could be eliminated with a goto.
